// Generated by CoffeeScript 1.9.3
var compile, debug, functions, middleware, split, stylus, test, variables;

debug = require('debug')('express-stylus');

stylus = require('stylus');

variables = ['includeCss:include css', 'compress', 'firebug', 'linenos', 'indentSpaces:indent spaces', 'sourcemap'];

functions = ['use', 'import'];

split = function(variable) {
  var canSplit, property, setting, splitArr;
  canSplit = variable.indexOf(':') > -1;
  splitArr = canSplit ? variable.split(':') : variable;
  property = canSplit ? splitArr[0] : splitArr;
  setting = canSplit ? splitArr[1] : splitArr;
  return {
    property: property,
    setting: setting
  };
};

test = function() {
  if (this._testCallback) {
    return this._testCallback.apply(null, arguments);
  }
};

compile = function(str, path) {
  var options, renderer;
  options = this;
  renderer = stylus(str);
  functions.forEach(function(fn) {
    if (Array.isArray(options[fn])) {
      return options[fn].forEach(function(i) {
        test.bind(options)('fn', fn, i);
        debug("using function '%s'", fn);
        return renderer[fn](i);
      });
    }
  });
  variables.forEach(function(i) {
    var variable;
    variable = split(i);
    if (options.hasOwnProperty(variable.property)) {
      test.bind(options)('var', variable.property, variable.setting, options[variable.property]);
      debug("setting '%s' to '%s'", variable.setting, options[variable.property].toString());
      return renderer.set(variable.setting, options[variable.property]);
    }
  });
  renderer.set('filename', path);
  return renderer;
};

middleware = function(options) {
  if (options == null) {
    options = {};
  }
  if (typeof options === 'string') {
    options = {
      src: options
    };
  }
  options.compile = compile;
  return stylus.middleware(options);
};

module.exports = middleware;
